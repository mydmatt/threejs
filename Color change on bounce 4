<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width">
  <title>https://jsbin.com/judeyid/1/edit?html,output</title>
	<style>
		#container {
			width: 100%;
			height: 100%;
            background: #000000;
		}
	</style>
</head>
<body>
  <div id="container"></div>
  <script src="https://cdn.rawgit.com/mrdoob/three.js/r92/build/three.min.js"></script>
  <script src="https://cdn.rawgit.com/mrdoob/three.js/r92/examples/js/controls/OrbitControls.js"></script>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.5.1/jquery.min.js"></script> 
  <script>
//General setup
	var WIDTH = 800, HEIGHT = 400;
    var scene = new THREE.Scene();
	var VIEW_ANGLE = 45, ASPECT = WIDTH / HEIGHT, NEAR = 1, FAR = 1000;
    var camera = new THREE.PerspectiveCamera(VIEW_ANGLE,ASPECT,NEAR,FAR);
    camera.position.z = 60;
    scene.add(camera);
	var view_container = $('#container');
    if (window.WebGLRenderingContext) {
      var renderer = new THREE.WebGLRenderer();
    } else {
      var renderer = new THREE.CanvasRenderer();   
    }
	var cameraControls = new THREE.OrbitControls(camera, renderer.domElement);
	cameraControls.addEventListener( 'mousemove', renderer );
    var light = new THREE.PointLight( 0xffffff, 5, 100 );
    light.position.set( 50, 50, 50 );
    scene.add( light );
	renderer.setSize(WIDTH, HEIGHT);
	view_container.append(renderer.domElement);
	    
    // define the torus knot geometry
    var geometry = new THREE.TorusKnotGeometry(3, 2, 17, 8);
    var material = new THREE.MeshLambertMaterial({
      color: 0x00ff00
	});
    var torus_knot = new THREE.Mesh(geometry, material);
    scene.add(torus_knot);
    
    // function that returns a string color in the format of #00ffff
    // based on this stack overflow solution: https://stackoverflow.com/questions/1484506/random-color-generator#1484514
    function getRandomColor() {
      var letters = '0123456789ABCDEF';
      var color = '#';
      for (var i = 0; i < 6; i++) {
        color += letters[Math.floor(Math.random() * 16)];
      }
      return color;
    }
    
    // function that changes the color of the knot
    function change_color() {
      var new_material = new THREE.MeshLambertMaterial({
        color: getRandomColor()
      });
      torus_knot.material = new_material;
    }

    // define variables that will be used for moving the object around
    var move_right = true;
    var falling = true;
    
    // bounce the object around the world
    function move_object() {
      if(move_right) {
        // move the object to the right
        torus_knot.position.x += .1;
      } else {
        // move the object to the left
        torus_knot.position.x -= .1;
      }
      
      if (falling) {
        // move the object down
        torus_knot.position.y -= .1;
      } else {
        // move the object up
        torus_knot.position.y += .1;
      }
    }
    
    // method that sets the x direction variable (move_right), and also changes the color when a wall is detected
    function detect_wall() {
      if(torus_knot.position.x > 35) {
        change_color();
        move_right = false;
      } else if (torus_knot.position.x < -20) {
        change_color();
        move_right = true;
      }
    }
    
    // method that sets the y direction variable (falling), and also changes the color when an edge is detected
    function detect_floor() {
      if (torus_knot.position.y < 0) {
        change_color();
        falling = false;
      } else if (torus_knot.position.y > 19) {
        change_color();
        falling = true;
      }
    }
   
	function render() {
        // edge detection that also updates the direction
        detect_wall();
        detect_floor();
      
        // moving the knot in the current direction
        move_object();
      
        // slowly rotate the knot to get a better view of the lighting
        torus_knot.rotateOnAxis(new THREE.Vector3(0, 0, 1), .04);
        torus_knot.rotateOnAxis(new THREE.Vector3(0, 1, 0), .01);
      

		cameraControls.update();
		renderer.render(scene, camera);
	}

	function animate() {
		requestAnimationFrame(animate);
		render();
	}

	animate();
  </script>
</body>
</html>


